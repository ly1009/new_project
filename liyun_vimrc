" vimrc
syntax on 
set number 
set expandtab
set hlsearch
set incsearch
set showcmd
set updatetime=100
set showmatch
set ai
set ts=4
set expandtab
set softtabstop=4
set shiftwidth=4
set nu
set autoindent
set cindent
"let Tlist_Auto_Open=1
"let Tlist_Ctags_Cmd="/usr/bin/ctags"
"let Tlist_Show_One_File=1
"let Tlist_Exit_OnlyWindow=1
"let Tlist_WinWidth=20
"set tags=./tags;,tags

set mouse=v
set clipboard=unnamedplus
nnoremap :set invpaste paste? imap :set invpaste paste? set pastetoggle=

" gutentags 搜索工程目录的标志，当前文件路径向上递归直到碰到这些文件/目录名
let g:gutentags_project_root = ['.root', '.git', '.hg', '.project']
"let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

 " 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

 " 同时开启 ctags 和 gtags 支持：
let g:gutentags_modules = []
"if executable('ctags')
"   let g:gutentags_modules += ['ctags']
"endif
if executable('gtags-cscope') && executable('gtags')
   let g:gutentags_modules += ['gtags_cscope']
endif

" 将自动生成的 ctags/gtags 文件全部放入 ~/.cache/tags
"目录中，避免污染工程目录
let g:gutentags_cache_dir = expand('~/.cache/tags')

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 如果使用 universal ctags 需要增加下面一行
let g:gutentags_ctags_extra_args += ['--output-format=e-ctags']

" 禁用 gutentags 自动加载 gtags 数据库的行为
"let g:gutentags_auto_add_gtags_cscope = 0


let g:gutentags_define_advanced_commands = 1

noremap <m-u> :PreviewScroll -1<cr>
noremap <m-d> :PreviewScroll +1<cr>
inoremap <m-u> <c-\><c-o>:PreviewScroll -1<cr>
inoremap <m-d> <c-\><c-o>:PreviewScroll +1<cr>

autocmd FileType qf nnoremap <silent><buffer> p :PreviewQuickfix<cr>
autocmd FileType qf nnoremap <silent><buffer> P :PreviewClose<cr>

noremap <F4> :PreviewSignature!<cr>
inoremap <F4> <c-\><c-o>:PreviewSignature!<cr>



call plug#begin()
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/gutentags_plus'
call plug#end()

set t_Co=256
let g:airline_theme = 'bubblegum'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#whitespace#enabled = 0


let g:ackhighlight = 1
let g:ackprg = 'ag -s --nogroup --nocolor --column --ignore=tags --ignore=cscope.* --ignore=build --ignore=perf'
map <C-p> :Ack!<Space>

hi Search cterm=bold ctermfg=15 ctermbg=242 gui=bold guifg=White guibg=Grey40

"colorscheme monokai
colorscheme molokai_dark
"set background=dark

"""if has("cscope")
"""    set csprg=/usr/bin/cscope
"""    set csto=0
"""    set cst
"""    set nocsverb
"""    set cspc=0
"""    if filereadable("cscope.out")
"""        cs add cscope.out
"""    else
"""        let cscope_file=findfile("cscope.out", ".;")
"""        let cscope_pre=matchstr(cscope_file, ".*/")
"""        if !empty(cscope_file) && filereadable(cscope_file)
"""            exe "cs add" cscope_file cscope_pre
"""        endif
"""    endif
"""    set csverb
"""endif
"""
""""-----ctags----------------------
"""map <F12>: !ctags -R --c-kinds=+p --field=+ias --extra=+q .<C-R><C-R>
""""-----ctags----------------------
""""-----cscope---------------------
"""nmap <C-a>s :cs find s <C-R>=expand("<cword>")<C-R><C-R>
"""nmap <C-a>g :cs find g <C-R>=expand("<cword>")<C-R><C-R>
"""nmap <C-a>c :cs find c <C-R>=expand("<cword>")<C-R><C-R>
"""nmap <C-a>t :cs find t <C-R>=expand("<cword>")<C-R><C-R>
"""nmap <C-a>e :cs find e <C-R>=expand("<cword>")<C-R><C-R>
"""nmap <C-a>f :cs find f <C-R>=expand("<cfile>")<C-R><C-R>
"""nmap <C-a>i :cs find i <C-R>=expand("<cfile>")<C-R><C-R>
"""nmap <C-a>d :cs find d <C-R>=expand("<cword>")<C-R><C-R>
"-----cscope---------------------
"---------python-----------------
"au BufNewFile,BufRead *.py
"set tabstop=4
"set softtabstop=4
"set shiftwidth=4
"set textwidth=79
"set expandtab
"set autoindent
"set fileformat=unix
"set encoding=utf-8
"let python_highlight_all=1
"---------python-----------------
"set nomodeline
"set term=screen 
"set nocompatible
"set statusline=%F%m%r%h%w

"set statusline+=\ %P 

"set laststatus=2
"""filetype off		      " required
" set the runtime path to include Vundle and initialize
"""set rtp+=~/.vim/bundle/Vundle.vim
"""call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
"""Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"""Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"""Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
"""call vundle#end()	     " required
"""filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList	    - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean	    - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
"""Plugin 'mileszs/ack.vim'
"""let g:ackhighlight = 1
"""let g:ackprg = 'ag -s --nogroup --nocolor --column --ignore=tags --ignore=cscope.* --ignore=build --ignore=perf'
"""map <C-p> :Ack!<Space>
"""Bundle 'ctrlpvim/ctrlp.vim'
"""let mapleader=";"
"""let g:ctrlp_map = '<leader>p'
"""let g:ctrlp_cmd = 'CtrlP'
"""map <leader>f :CtrlPMRU<CR>
"""let g:ctrlp_custom_ignore = {
"""    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
"""    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
"""    \ }
"""let g:ctrlp_working_path_mode=0
"""let g:ctrlp_match_window_bottom=1
"""let g:ctrlp_max_height=15
"""let g:ctrlp_match_window_reversed=0
"""let g:ctrlp_mruf_max=500
"""let g:ctrlp_follow_symlinks=1
"""
"""set rtp+=~/.fzf
"""
"""Bundle 'Lokaltog/vim-easymotion'
"""Plugin 'vim-airline'
"set t_Co=256
"let g:airline#extensions#whitespace#enabled = 0
"""Plugin 'vim-airline/vim-airline-themes'
"let g:airline_theme = 'bubblegum'
"""
"""Plugin 'majutsushi/tagbar'
"""nmap <silent> <F4> :TagbarToggle<CR>
"""let g:tagbar_ctags_bin = 'ctags'
"""let g:tagbar_width = 20
"""
"""
"""Bundle 'Shougo/vimproc.vim'
"""
"""Bundle 'Shougo/vimshell.vim'
"""
"""Bundle 'Shougo/neomru.vim'
"""
"""Plugin 'Shougo/unite.vim'
"""
"""Bundle 'tomasr/molokai'
"""let g:molokai_original = 1
"""
"""Bundle 'altercation/vim-colors-solarized'
"""let g:solarized_termtrans=1
"""let g:solarized_contrast="normal"
"""let g:solarized_visibility="normal"
"""
"colorscheme solarized 
"colorscheme desert 
"colorscheme molokai
"set background=dark
"----------------------------------------------------------------
"markdown
"""Plugin 'plasticboy/vim-markdown'
"""Plugin 'iamcco/markdown-preview.vim'
"-----------------python-----------------------------------------
"""Plugin 'vim-scripts/indentpython.vim'
"""Plugin 'scrooloose/syntastic'
"""Plugin 'nvie/vim-flake8'
"-----------------python-----------------------------------------
"""let g:mkdp_auto_start= 1 "open md pre auto"
" Unite

"""let g:unite_source_history_yank_enable = 1

"""call unite#filters#matcher_default#use(['matcher_fuzzy'])

"""nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>

"""nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>

"""nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>

"""nnoremap <leader>o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>

"""nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>

"""nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>


"""autocmd FileType unite call s:unite_settings()

"""function! s:unite_settings()
"""
"""  imap <buffer> <C-j> <Plug>(unite_select_next_line)
"""
"""  imap <buffer> <C-k> <Plug>(unite_select_previous_line)
"""
"""  nmap <silent><buffer><expr> Enter unite#do_action('switch')
"""
"""  nmap <silent><buffer><expr> <C-t> unite#do_action('tabswitch')
"""
"""  nmap <silent><buffer><expr> <C-h> unite#do_action('splitswitch')
"""
"""  nmap <silent><buffer><expr> <C-v> unite#do_action('vsplitswitch')
"""
"""  imap <silent><buffer><expr> Enter unite#do_action('switch')
"""
"""  imap <silent><buffer><expr> <C-t> unite#do_action('tabswitch')
"""
"""  imap <silent><buffer><expr> <C-h> unite#do_action('splitswitch')
"""
"""  imap <silent><buffer><expr> <C-v> unite#do_action('vsplitswitch')
"""
"""  map <buffer> <C-p> <Plug>(unite_toggle_auto_preview)
"""
"""  nnoremap <ESC> :UniteClose<cr>
"""
"""endfunction


